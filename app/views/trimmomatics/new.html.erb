<script>
    var pBar_options = document.getElementById("options");
    var pBar_select = document.getElementById("select");
    var pBar_download = document.getElementById("download");
    var pBar_directory = document.getElementById("directory");
    
    pBar_options.style.backgroundColor = "#ff1616";
    
    pBar_select.style.backgroundColor = "#53c322";
    pBar_download.style.backgroundColor = "#53c322";
    pBar_directory.style.backgroundColor = "#53c322";
    
</script>


<h3>Select trimming options and input data file names</h3>
<hr>

<h4>Add operation from the list below by selecting it from the dropdown menu and pressing "+ Add operation"</h4>
<span onclick="showHelp()">Click here to toggle display of option information.</span>
<div id = "optionInfo" style ="display:none;" class = "option">
    <ul>
        <li>Minimum quality for a base, also called LeadingQ - Cuts bases off the start of a read if below a threshold quality</li>
            <ul>
                <li>Specifiy the minimum quality required to keep a base</li>
                <li>Quality input is reported as a phred score -- a recommended quality score is 13</li>
            </ul>
        <br>
        <li>
            Sliding Window - Perform a sliding window trimming, cutting once the average quality within the window falls below a threshold.
            <ul>
                <li>Window size - Specifices the number of bases examened at one time, averages across these bases</li>
                <li>Required quality - Specifies the average quality for the bases within the window, phred score -- 15 recommended</li>
            </ul>
        </li>
        <br>
        <li>
            Crop Read - Cut the read to a specific length
            <ul>
                <li>Length - The number of bases to keep from the start of the read.</li>
                <li>Use this if you know your read(s) have quality problems at the <b>end</b> of their sequence</li>
            </ul>
        </li>
        <br>
        <li>
            Crop read from start - Cut the specificed number of bases from the start of the read
            <ul>
                <li>Length - The number of bases to cut from the start of the read</li>
                <li>Use this if you know your read(s) have quality problems at the <b>front</b> of their sequences</li>
            </ul>
        </li>
        <br>
        <li>
            Minimum Length - Drop the read if it is below a specific length
            <ul>
                <li>Read is thrown away if the total length is below a specific number</li>
                <li>Reads under a certian length could contain errors</li>
            </ul>
        </li>
    </ul>
</div>
<br>
<select id = "target">
    <option value="">Select Trimming Operation</option>
    <option value="leading">Minimum quality for a base</option>
    <option value="SlidingWindow">Sliding window</option>
    <option value="crop">Crop read</option>
    <option value="Hcrop">Crop read from start</option>
    <option value="minLen">Minimum length of read</option>
</select>

<button class = "btn" id = "button" type = "button" onclick="showDiv()">
    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Add Operation
</button>

<%= bootstrap_form_for @trimmomatic do |f| %>
<%= f.hidden_field :home_dir, value: @home %>
<%= f.hidden_field :soft_dir, value: @soft %>
<%= f.hidden_field :in_dir, value: @input %>
<%= f.hidden_field :out_dir, value: @output %>

<div id = "formDiv">
    <div class = "option" id = "leading" style = "display:none;">
        <p>Set the minimum quality required to keep a base.
        
        <button type ="button" class = "btn-sm" id = "trash" onclick="removeOperation(this.parentElement)">
            <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
        </button>
        </p>
        <div class = "form-inline">
            <%= f.number_field :leadingQ, label: "Minimum Base Quality: " %>
        </div>
    </div>
    <div id="SlidingWindow" style="display:none;" class="option">
        <p>Perform a sliding window trimming, cut read when the average quality within the window
        falls below a threshold
        
        <button type ="button" class = "btn-sm" id = "trash" onclick="removeOperation(this.parentElement)">
            <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
        </button>
        </p>
        
        <div class = "form-inline">
            <%= f.number_field :winSize, label: "Window Size: " %>
            <%= f.number_field :winQuality, label: "Required Quality of Window: " %>
        </div>
    </div>
    <div id="crop" style="display:none;" class="option">
        <p>Cut off the end of a read after a desired length for every read.
        <button type ="button" class = "btn-sm" id = "trash" onclick="removeOperation(this.parentElement)">
            <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
        </button>
        </p>
        
        <div class = "form-inline">
            <%= f.number_field :cropLen, label: "Length from start of the read: " %>
        </div>
        
    </div>
    
    <div id="Hcrop" style="display:none;" class="option">
        <p>Cut off the start of a read after a desired length for every read.
        <button type ="button" class = "btn-sm" id = "trash" onclick="removeOperation(this.parentElement)">
            <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
        </button>
        </p>
        
        <div class = "form-inline">
            <%= f.number_field :HcropLen, label: "Length to crop: " %>
        </div>
        
    </div>
    
    <div id="minLen" style="display:none;" class="option">
        <p>Specifies the minimum length of a read to be kept.
        <button type ="button" class = "btn-sm" id = "trash" onclick="removeOperation(this.parentElement)">
            <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
        </button>
        </p>
        
        <div class = "form-inline">
            <%= f.number_field :minLen, label: "Required read length: " %>
        </div>
        
    </div>
</div><!-- end of form div -->
<hr>


<div id = "read">
    <h4>What type of read do you have? Single-end or Paired-end Reads</h4> <br>
    <select id = "read_form" onchange="changeIn(this)">
        <option value="Single">Single-end</option>
        <option value="Paired">Paired-end</option>
    </select>

</div> 

<div id = "single" style="display:block;">
    <div id = "s_file">
        <br>
        <%= f.text_field :s_file, label: "Enter the file name of your single-end read, if you have multiple files to trim separate file names by a comma:" %>
    </div>
    
    </br>
</div>

<div id = "paired" style="display:none;">

    <div id = "p_file">
        <br>
        Enter the file name of your paired-end reads, if you have multiple files to trim separate file names by a comma. 
        <%= f.text_field :p_file_R, label: "Right side file of the paired read:" %>
        <%= f.text_field :p_file_L, label: "Left side file of a paired read:"%>
    </div>
    
</div>  


<center>
        <%= f.submit "Create" %>
    <% end %>
</center>


<script>

    function removeOperation(elem){
        var form_div = elem.parentElement;
        
        form_div.style.display = "none";
    }

    /*
    Function changes displays for dropdown menu
    Creates a clone of the orginal div above, changes the name of the div so that
    it can be checked for when the button is clicked -- can't add same option twice
    
    Each dropdown element/div will have two variables in the function 
    
    elem--dropdown element selected inside add operation determines what was selected
    
    */
    function showDiv(){
        
        var elem = document.getElementById('target');
        
        var leading_div = document.getElementById('leading');
        
        var SlidWin_div = document.getElementById('SlidingWindow');
        
        var crop_div = document.getElementById('crop');
        
        var Hcrop_div = document.getElementById('Hcrop');
        
        var minLen_div = document.getElementById('minLen');
        
        
        if(elem.value == "leading"){
            document.getElementById("trimmomatic_leadingQ").value = '';
            leading_div.style.display = leading_div.style.display == "none" ? "block" : "none";
        }
        else if(elem.value == "SlidingWindow"){
            document.getElementById("trimmomatic_winSize").value = '';
            document.getElementById("trimmomatic_winQuality").value = '';
            SlidWin_div.style.display = SlidWin_div.style.display == "none" ? "block" : "none";
        }
        else if(elem.value == "crop"){
            document.getElementById("trimmomatic_cropLen").value = '';
            crop_div.style.display = crop_div.style.display == "none" ? "block" : "none";
        }
        else if(elem.value == "Hcrop"){
            document.getElementById("trimmomatic_HcropLen").value = '';
            Hcrop_div.style.display = Hcrop_div.style.display == "none" ? "block" : "none";
        }
        else if(elem.value == "minLen"){
            document.getElementById("trimmomatic_minLen").value = '';
            minLen_div.style.display = minLen_div.style.display == "none" ? "block" : "none";
        }
        
    }
    
    function showHelp(){
        var helpDiv = document.getElementById("optionInfo");
        
        helpDiv.style.display = helpDiv.style.display == "none" ? "block" : "none";
    }
    
    
    /*
    Function changes div display for single or paired end reads
    also called when changing from single or multiple files 
    */
    function changeIn(elem){
        
        var single_div = document.getElementById('single');
        
        var paired_div = document.getElementById('paired');
        
        if(elem.value == "Single"){
            document.getElementById("trimmomatic_p_file_R").value = '';
            document.getElementById("trimmomatic_p_file_L").value = '';
            single_div.style = "display:block;";
            paired_div.style = "display:none;";
        }
        else if(elem.value == "Paired"){
            document.getElementById("trimmomatic_s_file").value = '';
            single_div.style = "display:none;";
            paired_div.style = "display:block;";
        }
        else if(elem == "s_file"){
            document.getElementById('s_file').style = "display:block;";
        }
        else if(elem == "p_file"){
            document.getElementById('p_file').style = "display:block;";
        }
    }

</script>