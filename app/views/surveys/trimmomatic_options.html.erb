<script>
    var pBar_options = document.getElementById("options");
    var pBar_select = document.getElementById("select");
    var pBar_download = document.getElementById("download");
    var pBar_directory = document.getElementById("directory");
    
    pBar_options.style.backgroundColor = "#b0b0b0";
    
    pBar_select.style.backgroundColor = "#53c322";
    pBar_download.style.backgroundColor = "#53c322";
    pBar_directory.style.backgroundColor = "#53c322";
    
</script>



<h4>Trimmomatic Trimming Options</h4>

<div id = "read">
    Single-end or Paired-end Reads? <br>
    <select id = "read_form" onchange="changeIn(this)">
        <option value="Single">Single-end</option>
        <option value="Paired">Paired-end</option>
    </select>

</div> 

<div id = "single" style="display:block;">
    <button class="btn btn-outline-primary" onclick="changeIn('s_file')">Single file</button>
    <button class="btn btn-outline-primary" onclick="changeIn('s_files')">Multiple files</button>
    
    <div id = "s_file">
        <br>Single file to trim:<input type ="text" class ="form-control" value="Input File Name">
    </div>
    
    <div id = "s_files" style="display:none;">
        <br>Enter multiple file names seperated by a comma:<textarea class = "form-control" rows = "4">Input Multiple file names</textarea>
    </div>
    
    </br>
</div>

<div id = "paired" style="display:none;">
    
    <button class="btn btn-outline-primary" onclick="changeIn('p_file')">One Pair</button>
    <button class="btn btn-outline-primary" onclick="changeIn('p_files')">Multiple Pairs</button>
    
    <div id = "p_file">
        <br>
        Read one of single pair:
        <input type ="text" class ="form-control" value="Input R1-File Name">
        Read two of single pair:
        <input type ="text" class ="form-control" value="Input R2-File Name">
    </div>
    
    <div id = "p_files" style="display:none;">
        Read one of multiple pairs:
        <textarea class = "form-control" rows = "4">Input Multiple file names separated by a comma</textarea>
        Read two of multiple pairs:
        <textarea class = "form-control" rows = "4">Input Multiple file names separated by a comma</textarea>
    </div>
</div>    



<button class = "btn" id = "button" onclick="addOperation()">
    <span class="glyphicon glyphicon-plus" aria-hidden="true"></span> Add Operation
</button>

<div class="option" id = "operation" style="display:none;">
    <select id = "target" onchange="showDiv(this)">
        <option value="">Select Trimming Operation</option>
        <option value="leading">Minimum quality for a base</option>
        <option value="SlidingWindow">Sliding window</option>
        <option value="crop">Crop read</option>
        <option value="Hcrop">Crop read from start</option>
        <option value="minLen">Minimum length of read</option>
    </select>
    
    <button class = "btn-sm" id = "trash" onclick="removeOperation(this.parentElement)">
        <span class="glyphicon glyphicon-trash" aria-hidden="true"></span>
    </button>
    
    
</div>    

<div class = "option" id = "leading" style = "display:none;">
    <p>Set the minimum quality required to keep a base.</p>
    
    <%= bootstrap_form_for @survey, :url => surveys_trimmomatic_options_path(@survey) do |f| %>
        <div class = "form-inline">
            <%= f.number_field :leadingQ, label: "Minimum Base Quality: " %>
        </div>
    <% end %>
    
    
</div>
    
<div id="SlidingWindow" style="display:none;" class="option">
    <p>Perform a sliding window trimming, cut read when the average quality within the window
    falls below a threshold</p>
    
    <%= bootstrap_form_for @survey, :url => surveys_trimmomatic_options_path(@survey), :html => {:class => "form-horizontal center"} do |f| %>
        <div class = "form-inline">
            <div class = "col-md-4">
                <%= f.number_field :winSize, label: "Window Size: " %>
            </div>
            <div class = "col-md-4"></div>
                <%= f.number_field :winQuality, label: "Required Quality of Window: " %>
            </div>
        </div>
    <% end %>
    
</div>

<div id="crop" style="display:none;" class="option">
    <p>Cut off the end of a read after a desired length for every read.</p>
    
    <%= bootstrap_form_for @survey, :url => surveys_trimmomatic_options_path(@survey) do |f| %>
        <div class = "form-inline">
            <%= f.number_field :cropLen, label: "Length from start of the read: " %>
        </div>
    <% end %>
    
</div>

<div id="Hcrop" style="display:none;" class="option">
    <p>Cut off the start of a read after a desired length for every read.</p>
    
    <%= bootstrap_form_for @survey, :url => surveys_trimmomatic_options_path(@survey) do |f| %>
        <div class = "form-inline">
            <%= f.number_field :HcropLen, label: "Length to crop: " %>
        </div>
    <% end %>
    
</div>

<div id="minLen" style="display:none;" class="option">
    <p>Specifies the minimum length of a read to be kept.</p>
    
    <%= bootstrap_form_for @survey, :url => surveys_trimmomatic_options_path(@survey) do |f| %>
        <div class = "form-inline">
            <%= f.number_field :minLen, label: "Required read length: " %>
        </div>
    <% end %>
    
</div>


<div>
    <hr>
    <center>
        <%= bootstrap_form_for @survey, :url => surveys_trimmomatic_options_path(@survey) do |f| %>
            <%= f.submit "Create" %>
        <% end %>
    </center>
</div>

<script>

    function removeOperation(elem){
        console.log(elem);
        //elem.removeChild(elem.children);
        elem.remove();
        
    }

    /*
    Function changes displays for dropdown menu
    Creates a clone of the orginal div above, changes the name of the div so that
    it can be checked for when the button is clicked -- can't add same option twice
    
    Each dropdown element/div will have two variables in the function 
    
    elem--dropdown element selected inside add operation determines what was selected
    
    */
    function showDiv(elem){
        
        var leading_div = document.getElementById('leading');
        var leading_check = document.getElementById("trueLeading");
        
        var SlidWin_div = document.getElementById('SlidingWindow');
        var SlidWin_check = document.getElementById("trueSlidWin");
        
        var crop_div = document.getElementById('crop');
        var crop_check = document.getElementById("trueCrop");
        
        var Hcrop_div = document.getElementById('Hcrop');
        var Hcrop_check = document.getElementById("trueHCrop");
        
        var minLen_div = document.getElementById('minLen');
        var minLen_check = document.getElementById("trueMinLen");
        
        
        if(elem.value == "leading"){
            if(leading_check == null){
                var clone = leading_div.cloneNode(true);
                clone.id = "trueLeading";
                clone.style = "display:block;";
                elem.parentNode.append(clone);
            }
            if(leading_check != null){
                alert("You've already choosen this option");
            }
        }
        else if(elem.value == "SlidingWindow"){
            if(SlidWin_check == null){
                var clone = SlidWin_div.cloneNode(true);
                clone.id = "trueSlidWin";
                clone.style = "display:block;";
                elem.parentNode.appendChild(clone);
            }
            if(SlidWin_check != null){
                alert("You've already choosen this option");
                }
        }
        else if(elem.value == "crop"){
            if(crop_check == null){
                var clone = crop_div.cloneNode(true);
                clone.id = "trueCrop";
                clone.style = "display:block;";
                elem.parentNode.appendChild(clone);
            }
            if(crop_check != null){
                alert("You've already choosen this option");
                }
        }
        else if(elem.value == "Hcrop"){
            if(Hcrop_check == null){
                var clone = Hcrop_div.cloneNode(true);
                clone.id = "trueHCrop";
                clone.style = "display:block;";
                elem.parentNode.appendChild(clone);
            }
            if(Hcrop_check != null){
                alert("You've already choosen this option");
                }
        }
        else if(elem.value == "minLen"){
            if(minLen_check == null){
                var clone = minLen_div.cloneNode(true);
                clone.id = "trueMinLen";
                clone.style = "display:block;";
                elem.parentNode.appendChild(clone);
            }
            if(minLen_check != null){
                alert("You've already choosen this option");
                }
        }
        
    }
    
    /*
    Function changes div display for single or paired end reads
    also called when changing from single or multiple files 
    */
    function changeIn(elem){
        
        var single_div = document.getElementById('single');
        
        var paired_div = document.getElementById('paired');
        
        if(elem.value == "Single"){
            single_div.style = "display:block;";
            paired_div.style = "display:none;";
        }
        else if(elem.value == "Paired"){
            single_div.style = "display:none;";
            paired_div.style = "display:block;";
        }
        else if(elem == "s_file"){
            document.getElementById('s_file').style = "display:block;";
            document.getElementById('s_files').style = "display:none;";
        }
        else if(elem == "s_files"){
            document.getElementById('s_file').style = "display:none;";
            document.getElementById('s_files').style = "display:block;";
        }
        else if(elem == "p_file"){
            document.getElementById('p_file').style = "display:block;";
            document.getElementById('p_files').style = "display:none;";
        }
        else if(elem == "p_files"){
            document.getElementById('p_file').style = "display:none;";
            document.getElementById('p_files').style = "display:block;";
        }
    }

</script>
<script>
    
    var i = 1;
    function addOperation(){
        
        var original = document.getElementById('operation');
        
        var clone = original.cloneNode(true);
        
        clone.id = "operation" + i++;
        clone.style = "display:block;";
        
        original.parentNode.appendChild(clone);
        //or use appendChild(clone);
        
    }
</script>